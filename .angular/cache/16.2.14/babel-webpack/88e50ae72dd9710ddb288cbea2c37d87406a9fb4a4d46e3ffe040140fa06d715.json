{"ast":null,"code":"import { Subject } from 'rxjs';\nimport translationsBy from 'src/locale/translations.by.json';\nimport translationsEn from 'src/locale/translations.en.json';\nimport translationsRu from 'src/locale/translations.ru.json';\nimport * as i0 from \"@angular/core\";\nexport class LanguageService {\n  constructor() {\n    this.defaultLanguage = 'en';\n    this.translations = {\n      'en': translationsEn,\n      'ru': translationsRu,\n      'by': translationsBy\n    };\n    this.languageChanged = new Subject();\n    this.selectedLanguageChanged = new Subject();\n  }\n  getTranslation(key) {\n    const selectedLanguage = this.getLanguage();\n    const translation = this.translations[selectedLanguage][key] || key;\n    // console.log(`Translation for key '${key}' in language '${selectedLanguage}': ${translation}`);\n    return translation;\n  }\n  getLanguage() {\n    const storedLanguage = localStorage.getItem('SelectedLanguage');\n    const language = storedLanguage || this.defaultLanguage;\n    // console.log(`Selected language: ${language}`);\n    return language;\n  }\n  setLanguage(language) {\n    localStorage.setItem('SelectedLanguage', language);\n    this.languageChanged.next(); // Notify other components about the language change\n  }\n  static #_ = this.ɵfac = function LanguageService_Factory(t) {\n    return new (t || LanguageService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LanguageService,\n    factory: LanguageService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","translationsBy","translationsEn","translationsRu","LanguageService","constructor","defaultLanguage","translations","languageChanged","selectedLanguageChanged","getTranslation","key","selectedLanguage","getLanguage","translation","storedLanguage","localStorage","getItem","language","setLanguage","setItem","next","_","_2","factory","ɵfac","providedIn"],"sources":["D:\\University\\QuanthinkWolfram-frontend\\QuanthinkWolfram\\src\\app\\services\\language.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport translationsBy from 'src/locale/translations.by.json';\r\nimport translationsEn from 'src/locale/translations.en.json';\r\nimport translationsRu from 'src/locale/translations.ru.json';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LanguageService {\r\n  private defaultLanguage: string = 'en';\r\n  private translations: { [key: string]: { [key: string]: string } } = {\r\n    'en': translationsEn,\r\n    'ru': translationsRu,\r\n    'by': translationsBy\r\n  };\r\n\r\n  languageChanged: Subject<void> = new Subject<void>();\r\n  public selectedLanguageChanged: Subject<string> = new Subject<string>();\r\n\r\n  constructor() { }\r\n\r\n  public getTranslation(key: string): string {\r\n    const selectedLanguage = this.getLanguage();\r\n    const translation = this.translations[selectedLanguage][key] || key;\r\n\r\n    // console.log(`Translation for key '${key}' in language '${selectedLanguage}': ${translation}`);\r\n\r\n    return translation;\r\n  }\r\n\r\n  public getLanguage(): string {\r\n    const storedLanguage = localStorage.getItem('SelectedLanguage');\r\n    const language = storedLanguage || this.defaultLanguage;\r\n\r\n    // console.log(`Selected language: ${language}`);\r\n\r\n    return language;\r\n  }\r\n\r\npublic setLanguage(language: string): void {\r\n  localStorage.setItem('SelectedLanguage', language);\r\n\r\n  this.languageChanged.next(); // Notify other components about the language change\r\n}\r\n}\r\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;AAC9B,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,cAAc,MAAM,iCAAiC;;AAK5D,OAAM,MAAOC,eAAe;EAW1BC,YAAA;IAVQ,KAAAC,eAAe,GAAW,IAAI;IAC9B,KAAAC,YAAY,GAAiD;MACnE,IAAI,EAAEL,cAAc;MACpB,IAAI,EAAEC,cAAc;MACpB,IAAI,EAAEF;KACP;IAED,KAAAO,eAAe,GAAkB,IAAIR,OAAO,EAAQ;IAC7C,KAAAS,uBAAuB,GAAoB,IAAIT,OAAO,EAAU;EAEvD;EAETU,cAAcA,CAACC,GAAW;IAC/B,MAAMC,gBAAgB,GAAG,IAAI,CAACC,WAAW,EAAE;IAC3C,MAAMC,WAAW,GAAG,IAAI,CAACP,YAAY,CAACK,gBAAgB,CAAC,CAACD,GAAG,CAAC,IAAIA,GAAG;IAEnE;IAEA,OAAOG,WAAW;EACpB;EAEOD,WAAWA,CAAA;IAChB,MAAME,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IAC/D,MAAMC,QAAQ,GAAGH,cAAc,IAAI,IAAI,CAACT,eAAe;IAEvD;IAEA,OAAOY,QAAQ;EACjB;EAEKC,WAAWA,CAACD,QAAgB;IACjCF,YAAY,CAACI,OAAO,CAAC,kBAAkB,EAAEF,QAAQ,CAAC;IAElD,IAAI,CAACV,eAAe,CAACa,IAAI,EAAE,CAAC,CAAC;EAC/B;EAAC,QAAAC,CAAA,G;qBAnCYlB,eAAe;EAAA;EAAA,QAAAmB,EAAA,G;WAAfnB,eAAe;IAAAoB,OAAA,EAAfpB,eAAe,CAAAqB,IAAA;IAAAC,UAAA,EAFd;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}